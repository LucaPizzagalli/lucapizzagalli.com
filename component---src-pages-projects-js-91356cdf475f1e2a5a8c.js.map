{"version":3,"file":"component---src-pages-projects-js-91356cdf475f1e2a5a8c.js","mappings":"oMAQA,SAASA,EAAWC,GAAkB,IAAjB,KAAEC,EAAI,KAAEC,GAAMF,EAC3BG,GAAQC,EAAAA,EAAAA,GAASF,EAAKG,cAC1B,OACIC,EAAAA,cAAA,WAASC,UAAU,QACD,SAAbL,EAAKM,IACFP,EACIK,EAAAA,cAAA,OAAKG,QAASA,IAAMR,EAAKS,OAAO,SAC5BC,MAAO,CAAEC,eAAgB,YAAaC,MAAO,UAAWC,OAAQ,YAEhER,EAAAA,cAACS,EAAAA,EAAW,CAACZ,MAAOA,EAAOa,IAAKd,EAAKe,QAASN,MAAO,CAACO,aAAc,UACpEZ,EAAAA,cAAA,MAAIC,UAAU,iBAAgB,IAAEL,EAAKiB,MAAM,MAG/Cb,EAAAA,cAACc,EAAAA,KAAI,CAACC,GAAI,SACNf,EAAAA,cAACS,EAAAA,EAAW,CAACZ,MAAOA,EAAOa,IAAKd,EAAKe,QAASN,MAAO,CAACO,aAAc,UACpEZ,EAAAA,cAAA,MAAIC,UAAU,iBAAgB,IAAEL,EAAKiB,MAAM,MAGnDjB,EAAKoB,WACDhB,EAAAA,cAAA,KAAGiB,KAAMrB,EAAKM,KACVF,EAAAA,cAACS,EAAAA,EAAW,CAACZ,MAAOA,EAAOa,IAAKd,EAAKe,QAASN,MAAO,CAACO,aAAc,UACpEZ,EAAAA,cAAA,MAAIC,UAAU,iBAAgB,IAAEL,EAAKiB,MAAM,MAG/Cb,EAAAA,cAACc,EAAAA,KAAI,CAACC,GAAInB,EAAKM,KACXF,EAAAA,cAACS,EAAAA,EAAW,CAACZ,MAAOA,EAAOa,IAAKd,EAAKe,QAASN,MAAO,CAACO,aAAc,UACpEZ,EAAAA,cAAA,MAAIC,UAAU,iBAAgB,IAAEL,EAAKiB,MAAM,MAGvDb,EAAAA,cAAA,KAAGC,UAAU,gBAAgBI,MAAO,CAAEa,SAAU,IAAMtB,EAAKuB,SAC3DnB,EAAAA,cAAA,OAAKK,MAAO,CAAEe,QAAS,OAAQC,SAAU,OAAQC,WAAY,WACxD1B,EAAK2B,aAAaC,KAAIC,GAASzB,EAAAA,cAAA,OAAK0B,IAAKD,EAAMxB,UAAU,QAASwB,KACnEzB,EAAAA,cAAA,OAAK0B,IAAI,QAAQrB,MAAO,CAAEa,SAAU,KACnCtB,EAAK+B,QACF3B,EAAAA,cAAA,KAAG0B,IAAI,SAAST,KAAMrB,EAAK+B,OAAQtB,MAAO,CAAEuB,OAAQ,SAAW,WAKnF,CA4DA,UAzDA,SAAqBC,GAAY,IAAX,KAAElC,GAAMkC,EAC1B,OACI7B,EAAAA,cAAC8B,EAAAA,EAAM,CAACnC,KAAMA,EAAMoC,SAAS,aACzB/B,EAAAA,cAACgC,EAAAA,EAAG,CAACnB,MAAM,WAAWoB,YAAY,GAAGC,KAAK,KAAKC,KAAM,KACrDnC,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,SAAG,qDACHA,EAAAA,cAAA,OAAKC,UAAU,OAAOI,MAAOV,GAAQA,EAAKyC,MAAQ,EAAI,CAAER,OAAQ,QAAW,CAAC,GACxE5B,EAAAA,cAACqC,EAAAA,YAAW,CACRC,MAAK,aA8BLC,OAAQ3C,GACJA,EAAK4C,kBAAkBC,MAAMjB,KAAIkB,IAC7B,IAAI,YAAEC,GAAgBD,EAAKE,KAC3B,OACI5C,EAAAA,cAAA,OAAK0B,IAAKiB,EAAYzC,IAAKD,UAAU,YACjCI,MAAOV,GAAQA,EAAKyC,MAAQ,EAAI,CAAES,MAAO,QAAW,CAAC,GAErD7C,EAAAA,cAACP,EAAW,CAACE,KAAMA,EAAMC,KAAM+C,IAC7B,OAQtC,C","sources":["webpack://luca-pizzagalli-website/./src/pages/projects.js"],"sourcesContent":["import React from \"react\";\r\nimport { graphql, StaticQuery, Link } from 'gatsby'\r\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\r\n\r\nimport Layout from \"../components/layout\";\r\nimport Seo from \"../components/seo\";\r\n\r\n\r\nfunction ProjectCard({ loop, data }) {\r\n    let image = getImage(data.previewImage);\r\n    return (\r\n        <section className=\"card\">\r\n            {data.url === \"nope\" ?\r\n                loop ?\r\n                    <div onClick={() => loop.setUrl(\"/loop\")}\r\n                        style={{ textDecoration: \"underline\", color: \"#01ff70\", cursor: \"pointer\" }}\r\n                    >\r\n                        <GatsbyImage image={image} alt={data.altText} style={{marginBottom: \"2rem\"}}/>\r\n                        <h2 className=\"internal-text\"> {data.title} </h2>\r\n                    </div>\r\n                    :\r\n                    <Link to={\"/loop\"}>\r\n                        <GatsbyImage image={image} alt={data.altText} style={{marginBottom: \"2rem\"}} />\r\n                        <h2 className=\"internal-text\"> {data.title} </h2>\r\n                    </Link>\r\n                :\r\n                data.staticLink ?\r\n                    <a href={data.url}>\r\n                        <GatsbyImage image={image} alt={data.altText} style={{marginBottom: \"2rem\"}} />\r\n                        <h2 className=\"internal-text\"> {data.title} </h2>\r\n                    </a>\r\n                    :\r\n                    <Link to={data.url}>\r\n                        <GatsbyImage image={image} alt={data.altText} style={{marginBottom: \"2rem\"}}/>\r\n                        <h2 className=\"internal-text\"> {data.title} </h2>\r\n                    </Link>\r\n            }\r\n            <p className=\"internal-text\" style={{ flexGrow: 1 }}>{data.excerpt}</p>\r\n            <div style={{ display: \"flex\", flexWrap: \"wrap\", alignItems: \"center\" }}>\r\n                {data.technologies.map(tech => (<div key={tech} className=\"chip\" >{tech}</div>))}\r\n                <div key=\"empty\" style={{ flexGrow: 1 }}></div>\r\n                {data.github &&\r\n                    <a key=\"github\" href={data.github} style={{ margin: \"1rem\" }} >GitHub</a>\r\n                }\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\n\r\nfunction ProjectsPage({ loop }) {\r\n    return (\r\n        <Layout loop={loop} location=\"/projects\">\r\n            <Seo title=\"Projects\" description=\"\" lang=\"en\" meta={[]} />\r\n            <h1>My projects</h1>\r\n            <p>Some of the projects for which I have a nice pic.</p>\r\n            <div className=\"grid\" style={loop && loop.level > 8 ? { margin: \"0rem\" } : {}}>\r\n                <StaticQuery\r\n                    query={graphql`\r\n                            query ProjectList {\r\n                            allMarkdownRemark(\r\n                              filter: {fileAbsolutePath: {regex: \"/(projects)/\"  }}\r\n                              sort: {order: DESC, fields: [frontmatter___order]}\r\n                            ) {\r\n                              edges {\r\n                                node {\r\n                                  frontmatter {\r\n                                    url\r\n                                    title\r\n                                    order\r\n                                    previewImage {\r\n                                      childImageSharp {\r\n                                        gatsbyImageData(\r\n                                          layout: FULL_WIDTH\r\n                                        )\r\n                                      }\r\n                                    }\r\n                                    altText\r\n                                    staticLink\r\n                                    excerpt\r\n                                    technologies\r\n                                    github\r\n                                  }\r\n                                }\r\n                              }\r\n                            } \r\n                          }\r\n                        `}\r\n                    render={data => (\r\n                        data.allMarkdownRemark.edges.map(edge => {\r\n                            let { frontmatter } = edge.node;\r\n                            return (\r\n                                <div key={frontmatter.url} className=\"grid-item\"\r\n                                    style={loop && loop.level > 8 ? { width: \"100%\" } : {}}\r\n                                >\r\n                                    <ProjectCard loop={loop} data={frontmatter} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    )}\r\n                />\r\n            </div>\r\n        </Layout>\r\n    );\r\n}\r\n\r\n\r\nexport default ProjectsPage\r\n"],"names":["ProjectCard","_ref","loop","data","image","getImage","previewImage","React","className","url","onClick","setUrl","style","textDecoration","color","cursor","GatsbyImage","alt","altText","marginBottom","title","Link","to","staticLink","href","flexGrow","excerpt","display","flexWrap","alignItems","technologies","map","tech","key","github","margin","_ref2","Layout","location","Seo","description","lang","meta","level","StaticQuery","query","render","allMarkdownRemark","edges","edge","frontmatter","node","width"],"sourceRoot":""}